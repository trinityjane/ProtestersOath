# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  IPA_INPUT = "Runner"

  FIREBASE_APP_ID = "1:1087855424394:ios:73d498fc25bf7891fa8e73"
  RELEASE_NOTES_FILE = "/Users/robblovell/Code/original/protestersoath/docs/release-notes.txt"

    lane :beta do
      cert
      sigh(force: true)
    end

    def bumpAll
        sh("../bin/bump.sh")
#        increment_build_number(xcodeproj: "Runner.xcodeproj")
#        increment_build_number()
    end

    def getInfo
      commit = last_git_commit
      revNumber=`git rev-list --all|wc -l|xargs`
      shaNumber=`git rev-parse --verify --short HEAD`
      branch=`git branch --show-current`
      commit[:branch] = branch
      commit[:rev] = revNumber
      commit[:sha] = commit[:abbreviated_commit_hash]
      print("Rev number: #{revNumber}".blue)
      print("Commit SHA: #{shaNumber}".blue)
      puts("Commit Author: #{commit[:author]}".blue)
      puts("Commit Message: #{commit[:message]}".blue)
      puts("Commit HASH: #{commit[:commit_hash]}".blue)
      puts("Commit SHA: #{commit[:abbreviated_commit_hash]}".blue)
      puts("Commit Branch: #{branch}".blue)
      puts("Commit Object: #{commit}".yellow)
      return commit
    end

    def buildIOS(options)
      puts "Build method is #{options[:method]}. Possible: [app-store,ad-hoc,package,enterprise,development,developer-id]"

#      flutter build ios options[:method]=="app-store"?"":"--release --no-codesign"
      get_certificates
      get_provisioning_profile(
        adhoc: options[:method]=="app-store"?false:true,
        force: true#,
      )
      gym(export_method: options[:method])

#      flutter build ios --release --no-codesign
#      build_ios_app(scheme: IPA_INPUT, export_method: options[:method], exportPath: IPA_OUTPUT)
#      build_app(
#        scheme: "Runner",
#        # ["app-store", "ad-hoc", "package", "enterprise", "development", "developer-id"]
#        export_method: options[:method],
#      )
    end

    def toFirebase
      firebase_app_distribution(
        ipa_path: IPA_INPUT,
        app: FIREBASE_APP_ID,
        testers: "robblovell@gmail.com",  # "/path/to/testers.txt"
        release_notes: RELEASE_NOTES_FILE,
        firebase_cli_token: $FIREBASE_TOKEN
      )
    end

    def toTestFlight
        upload_to_testflight()
    end

    def notifySlack(message, commit, result)
      slack(
        slack_url: ENV["SLACK_HOOK"],
        message: message,
        success: result,
        default_payloads: [commit[:branch],commit[:sha],commit[:rev], commit[:message]]
      )
    end

    desc "Generate new localized screenshots"
      lane :screenshots do
        capture_screenshots(workspace: "Runner.xcworkspace", scheme: "Runner")
        upload_to_app_store(skip_binary_upload: true, skip_metadata: true)
      end

    desc "info"
      lane :info do |options|
        getInfo()
      end

    desc "bump"
      lane :bump do |options|
        bumpAll()
        notifySlack("Versions for ios and android have been bumped.", commit, true)
      end

    desc "build"
      lane :build do |options|
        buildIOS(options)
        commit = getInfo()
        notifySlack("A new build complete. #{commit[:rev]} - #{commit[:sha]}", commit, true)
      end

    desc "tofirebase"
      lane :tofirebase do |options|
        toFirebase()
        commit = getInfo()
        notifySlack("A new build is available for testing. #{commit[:rev]} - #{commit[:sha]}", commit, true)
      end

    desc "totestflight"
      lane :totestflight do |options|
        toTestFlight()
        commit = getInfo()
        notifySlack("A new build is available for testing. #{commit[:rev]} - #{commit[:sha]}", commit, true)
      end

      # handle exception
    error do |lane, exception, options|
      commit = getInfo()
      notifySlack("Build failed with exception: #{commit[:rev]} - #{commit[:sha]} #{exception}", commit, false)
    end
end
